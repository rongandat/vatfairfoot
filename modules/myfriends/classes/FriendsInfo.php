<?php/** * PsblogCategory class * Prestablog module * @category classes * * @author Appside * @copyright Appside * */require_once(_PS_MODULE_DIR_ . 'myfriends/classes/FriendsImage.php');class FriendsInfo extends ObjectModel {    public $id_friend;    public $name;    public $active = 1;    public $website;    public $facebook;    public $position;    public $date_add;    public $date_upd;    protected static $_links = array();    /**     * @see ObjectModel::$definition     */    public static $definition = array(        'table' => 'friend',        'primary' => 'id_friend',        'fields' => array(            'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => true),            'position' => array('type' => self::TYPE_INT),            'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),            'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),            'name' => array('type' => self::TYPE_STRING, 'validate' => 'isCatalogName', 'required' => true, 'size' => 64),            'website' => array('type' => self::TYPE_STRING),            'facebook' => array('type' => self::TYPE_STRING),        ),    );    public function add($autodate = true, $null_values = false) {//        foreach ($this->name as $k => $value)////            if (preg_match('/^[1-9]\./', $value))////                $this->name[$k] = '0' . $value;        $ret = parent::add($autodate, $null_values);        return $ret;    }    public function update($null_values = false) {        foreach ($this->name as $k => $value)            if (preg_match('/^[1-9]\./', $value))                $this->name[$k] = '0' . $value;        return parent::update($null_values);    }    public static function listFriends() {        $query = 'SELECT f.id_friend as id_option,f.name			  FROM  ' . _DB_PREFIX_ . 'friend f                            ';        $query .= ' WHERE 1=1 ';        $query .= ' AND f.active=1';        $query .= ' ORDER BY f.`position` ASC, f.`name` ASC';        return Db::getInstance()->ExecuteS($query);    }        public function delete() {        $to_delete = array((int) $this->id);        $list = count($to_delete) > 1 ? implode(',', $to_delete) : (int) $this->id;        Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'friend` WHERE `id_friend` IN (' . $list . ')');        Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'friend_data` WHERE `id_friend` IN (' . $list . ')');        return true;    }    public static function getFriends($start = 0, $limit = null, $publish = true) {        $query = ' Select * from ' . _DB_PREFIX_ . 'friend f ';               $query .= ' WHERE 1 = 1 ';        if ($publish)            $query .= ' AND f.active = 1';        $query .= ' ORDER BY f.`position` ASC, f.`name` ASC';        if (!is_null($limit))            $query .= ' LIMIT ' . $start . ',' . $limit;        return Db::getInstance()->ExecuteS($query);    }}?>